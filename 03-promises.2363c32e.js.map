{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,MAAOC,SAASC,cAAc,qBAC9BC,KAAMF,SAASC,cAAc,oBAC7BE,OAAQH,SAASC,cAAc,sBAC/BG,IAAKJ,SAASC,cAAc,UAO9B,SAASI,EAAcC,EAAUP,GAC/B,IAAMQ,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEL,WAAUP,UAEpBa,EAAO,CAAEN,WAAUP,S,GAEpBA,E,IAbPD,EAAKC,MAAMe,aAAa,MAAO,GAC/BhB,EAAKI,KAAKY,aAAa,MAAO,GAC9BhB,EAAKK,OAAOW,aAAa,MAAO,GA8BhChB,EAAKM,IAAIW,iBAAiB,UAAU,SAAAC,GAClCA,EAAIC,iBAfN,SAAwBlB,EAAOG,EAAMC,GACnC,IAAK,IAAIe,EAAI,EAAGA,GAAKf,EAAQe,GAAK,EAChCb,EAAca,EAAGnB,GACdoB,MAAK,SAAAC,G,IAAGd,EAAQc,EAARd,SAAUe,EAAKD,EAALrB,MACjBH,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAflB,EAAS,QAAYkB,OAANH,EAAM,M,IAE9DI,OAAM,SAAAL,G,IAAGd,EAAQc,EAARd,SAAUe,EAAKD,EAALrB,MAClBH,EAAA0B,OAAOI,QAAQ,sBAAqCF,OAAflB,EAAS,QAAYkB,OAANH,EAAM,M,IAE9DtB,GAASG,C,CAUXyB,CAHYC,OAAO9B,EAAKC,MAAM8B,OACjBD,OAAO9B,EAAKI,KAAK2B,OACfD,OAAO9B,EAAKK,OAAO0B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n  btn: document.querySelector('.form'),\n};\n\nrefs.delay.setAttribute('min', 0);\nrefs.step.setAttribute('min', 0);\nrefs.amount.setAttribute('min', 0);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nfunction createPromises(delay, step, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n  return;\n}\n\nrefs.btn.addEventListener('submit', evt => {\n  evt.preventDefault();\n  let delay = Number(refs.delay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n  createPromises(delay, step, amount);\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","btn","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","setAttribute","addEventListener","evt","preventDefault","i","then","param","_$delay","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromises","Number","value"],"version":3,"file":"03-promises.2363c32e.js.map"}